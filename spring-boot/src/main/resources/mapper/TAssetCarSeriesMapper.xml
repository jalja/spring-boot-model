<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jalja.org.boot.mapper.TAssetCarSeriesMapper">
  <resultMap id="BaseResultMap" type="com.jalja.org.boot.model.TAssetCarSeries">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="brand_id" jdbcType="BIGINT" property="brandId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="group_name" jdbcType="VARCHAR" property="groupName" />
    <result column="is_allow_loan" jdbcType="SMALLINT" property="isAllowLoan" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="series_type_id" jdbcType="BIGINT" property="seriesTypeId" />
    <result column="is_del" jdbcType="INTEGER" property="isDel" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.jalja.org.boot.model.TAssetCarSeries">
    <result column="series_colors" jdbcType="LONGVARCHAR" property="seriesColors" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, brand_id, name, group_name, is_allow_loan, update_time, series_type_id, is_del
  </sql>
  <sql id="Blob_Column_List">
    series_colors
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.jalja.org.boot.model.TAssetCarSeriesExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_asset_car_series
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.jalja.org.boot.model.TAssetCarSeriesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_asset_car_series
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_asset_car_series
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_asset_car_series
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.jalja.org.boot.model.TAssetCarSeriesExample">
    delete from t_asset_car_series
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jalja.org.boot.model.TAssetCarSeries">
    insert into t_asset_car_series (id, brand_id, name, 
      group_name, is_allow_loan, update_time, 
      series_type_id, is_del, series_colors
      )
    values (#{id,jdbcType=BIGINT}, #{brandId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, 
      #{groupName,jdbcType=VARCHAR}, #{isAllowLoan,jdbcType=SMALLINT}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{seriesTypeId,jdbcType=BIGINT}, #{isDel,jdbcType=INTEGER}, #{seriesColors,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jalja.org.boot.model.TAssetCarSeries">
    insert into t_asset_car_series
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="brandId != null">
        brand_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="groupName != null">
        group_name,
      </if>
      <if test="isAllowLoan != null">
        is_allow_loan,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="seriesTypeId != null">
        series_type_id,
      </if>
      <if test="isDel != null">
        is_del,
      </if>
      <if test="seriesColors != null">
        series_colors,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="brandId != null">
        #{brandId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="groupName != null">
        #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="isAllowLoan != null">
        #{isAllowLoan,jdbcType=SMALLINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="seriesTypeId != null">
        #{seriesTypeId,jdbcType=BIGINT},
      </if>
      <if test="isDel != null">
        #{isDel,jdbcType=INTEGER},
      </if>
      <if test="seriesColors != null">
        #{seriesColors,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jalja.org.boot.model.TAssetCarSeriesExample" resultType="java.lang.Long">
    select count(*) from t_asset_car_series
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_asset_car_series
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.brandId != null">
        brand_id = #{record.brandId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.groupName != null">
        group_name = #{record.groupName,jdbcType=VARCHAR},
      </if>
      <if test="record.isAllowLoan != null">
        is_allow_loan = #{record.isAllowLoan,jdbcType=SMALLINT},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.seriesTypeId != null">
        series_type_id = #{record.seriesTypeId,jdbcType=BIGINT},
      </if>
      <if test="record.isDel != null">
        is_del = #{record.isDel,jdbcType=INTEGER},
      </if>
      <if test="record.seriesColors != null">
        series_colors = #{record.seriesColors,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update t_asset_car_series
    set id = #{record.id,jdbcType=BIGINT},
      brand_id = #{record.brandId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      group_name = #{record.groupName,jdbcType=VARCHAR},
      is_allow_loan = #{record.isAllowLoan,jdbcType=SMALLINT},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      series_type_id = #{record.seriesTypeId,jdbcType=BIGINT},
      is_del = #{record.isDel,jdbcType=INTEGER},
      series_colors = #{record.seriesColors,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_asset_car_series
    set id = #{record.id,jdbcType=BIGINT},
      brand_id = #{record.brandId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      group_name = #{record.groupName,jdbcType=VARCHAR},
      is_allow_loan = #{record.isAllowLoan,jdbcType=SMALLINT},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      series_type_id = #{record.seriesTypeId,jdbcType=BIGINT},
      is_del = #{record.isDel,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jalja.org.boot.model.TAssetCarSeries">
    update t_asset_car_series
    <set>
      <if test="brandId != null">
        brand_id = #{brandId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="groupName != null">
        group_name = #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="isAllowLoan != null">
        is_allow_loan = #{isAllowLoan,jdbcType=SMALLINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="seriesTypeId != null">
        series_type_id = #{seriesTypeId,jdbcType=BIGINT},
      </if>
      <if test="isDel != null">
        is_del = #{isDel,jdbcType=INTEGER},
      </if>
      <if test="seriesColors != null">
        series_colors = #{seriesColors,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jalja.org.boot.model.TAssetCarSeries">
    update t_asset_car_series
    set brand_id = #{brandId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      group_name = #{groupName,jdbcType=VARCHAR},
      is_allow_loan = #{isAllowLoan,jdbcType=SMALLINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      series_type_id = #{seriesTypeId,jdbcType=BIGINT},
      is_del = #{isDel,jdbcType=INTEGER},
      series_colors = #{seriesColors,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jalja.org.boot.model.TAssetCarSeries">
    update t_asset_car_series
    set brand_id = #{brandId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      group_name = #{groupName,jdbcType=VARCHAR},
      is_allow_loan = #{isAllowLoan,jdbcType=SMALLINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      series_type_id = #{seriesTypeId,jdbcType=BIGINT},
      is_del = #{isDel,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>