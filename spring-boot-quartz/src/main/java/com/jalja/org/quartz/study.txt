1、任务       job
2、调度器   Schedule 
3、触发器   Trigger 
4、监听器

====================================Trigger===================================
Trigger:Quartz 中的触发器用来高数调度程序作业什么时候出发，即Trigger对象是用来触发执行Job的。
三个重要属性：
 	1.JobKey :表示job实例的标识，触发器被触发时，该指定的job实例会执行。
 		JobKey jobKey=jobContext.getJobDetail().getKey();
 	2。startTime 表示触发器首次被触发的时间。类型 java.util.Date  
 	    startAt(new Date())
 	3.EndTime :表示触发不再被触发的时间。类型 java.util.Date 
 	    endAt(new Date())
 
 Trigger的实现类：
    1、org.quartz.impl.triggers.SimpleTriggerImpl	在一个指定的时间段内执行一次作业任务，或者是在指定的时间间隔内多次执行作业任务。
    
    demo:立即执行，且只执行一次
      Trigger trigger =TriggerBuilder.newTrigger().withIdentity("myTrigger", "myGroup").startAt(new Date()).build();

    demo:立即执行并且每隔4秒执行一次，可以重复执行无限次 （SimpleTrigger.REPEAT_INDEFINITELY）
     Trigger trigger =TriggerBuilder.newTrigger()
			      .withIdentity("myTrigger", "myGroup").startAt(new Date())
			       .withSchedule(SimpleScheduleBuilder.simpleSchedule()
			        .withIntervalInSeconds(4).withRepeatCount(SimpleTrigger.REPEAT_INDEFINITELY)).build();
			        
    demo:在 开始时间与结束时间之间 每隔4秒执行一次  
       Trigger trigger =TriggerBuilder.newTrigger()
			      .withIdentity("myTrigger", "myGroup").startAt(new Date()).endAt(new Date())
			       .withSchedule(SimpleScheduleBuilder.simpleSchedule()
			        .withIntervalInSeconds(4).withRepeatCount(SimpleTrigger.REPEAT_INDEFINITELY)).build();			        
			        
	注意点：一旦指定了结束时间，则他将覆盖重复执行次数的效果。
	
	   		            
    
     2、org.quartz.impl.triggers.CronTriggerImpl:基于日历的作业调度
     Cron 表达式：用于配置CronTrigger实例，由7个子表达式组成的字符串，描述了时间表的详细信息，格式 秒、分、小时、日、月、周、年
      
       //2018年每天的21:23分执行一次
		 Trigger trigger=TriggerBuilder.newTrigger().withIdentity("My.Trigger", "triggerGroup")
				 .withSchedule(CronScheduleBuilder.cronSchedule("0 23 21 ? * * 2018")).build(); 

==========================================Schedule======================================	

org.quartz.impl.StdSchedulerFactory:使用一组参数来创建和初始化Quzrtz调度器		  
配置文件：quartz.properties

 //创建调度器
 Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();  
 //将任务和触发器注册到调度器上 返回最近将要执行的时间
 Date data=scheduler.scheduleJob(jobDetail, trigger);
 //启动调度器
 scheduler.start();  
 //将当前已经启动的调度器挂起 再次启动可以激活  
 scheduler.standby();	  
 //关闭调度器
 scheduler.shutdown(false);    false：直接关闭       true：等待所有正在执行的job运行完后关闭
 	    
 	    
 	    
 	    
 	    